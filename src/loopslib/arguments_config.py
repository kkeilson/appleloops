"""Contains the dictionaries to use for constructing arguments."""

# pylint: disable=relative-import
try:
    import version
except ImportError:
    from . import version
# pylint: enable=relative-import


# Arguments that can be combined together.
CL_ARGUMENTS = {
    'apfs': {'args': ['--APFS'],
             'kwargs': {'action': 'store_true',
                        'dest': 'apfs_dmg',
                        'help': 'dmg is created with APFS',
                        'required': False}},
    'apps': {'args': ['-a', '--apps'],
             'kwargs': {'type': str,
                        'nargs': '+',
                        'dest': 'apps',
                        'metavar': '<app>',
                        'help': 'specify the application to process loops for',
                        'required': False}},
    'cache_server': {'args': ['-c', '--cache-server'],
                     'kwargs': {'type': str,
                                'nargs': 1,
                                'dest': 'cache_server',
                                'metavar': 'https://example.org:12345',
                                'help': 'specify a local Apple caching server',
                                'required': False}},
    'dry_run': {'args': ['-n', '--dry-run'],
                'kwargs': {'action': 'store_true',
                           'dest': 'dry_run',
                           'help': 'performs a dry run',
                           'required': False}},
    'insecure': {'args': ['-i', '--allow-insecure'],
                 'kwargs': {'action': 'store_true',
                            'dest': 'insecure',
                            'help': 'ignore invalid certificates when downloading',
                            'required': False}},
    'install_target': {'args': ['--target'],
                       'kwargs': {'type': str,
                                  'nargs': 1,
                                  'dest': 'install_target',
                                  'metavar': '<target>',
                                  'help': 'installs packages to the specified target',
                                  'required': False}},
    'log': {'args': ['-l', '--log-level'],
            'kwargs': {'type': str,
                       'dest': 'log_level',
                       'help': 'specify logging level INFO (default) or DEBUG',
                       'metavar': '<level>',
                       'choices': ['DEBUG', 'INFO'],
                       'default': 'INFO',
                       'required': False}},
    'mandatory': {'args': ['-m', '--mandatory'],
                  'kwargs': {'action': 'store_true',
                             'dest': 'mandatory',
                             'help': 'processes the mandatory packages',
                             'required': False}},
    'optional': {'args': ['-o', '--optional'],
                 'kwargs': {'action': 'store_true',
                            'dest': 'optional',
                            'help': 'processes the optional packages',
                            'required': False}},
    # 'optional': {'args': ['-o', '--optional'],
    #              'kwargs': {'type': str,
    #                         'nargs': '?',
    #                         'dest': 'optional',
    #                         'metavar': '<pack>',
    #                         'help': 'processes optional packages.',
    #                         'default': 'all',
    #                         'required': False}},
    'pkg_server': {'args': ['--pkg-server'],
                   'kwargs': {'type': str,
                              'nargs': 1,
                              'dest': 'pkg_server',
                              'metavar': 'https://example.org/packages_path/',
                              'help': 'specify a local http/https mirror, or hosted dmg file',
                              'required': False}},
    'untrusted': {'args': ['-u', '--allow-untrusted'],
                  'kwargs': {'action': 'store_true',
                             'dest': 'unsecure',
                             'help': 'installs packages with invalid certificates',
                             'required': False}},
    'version': {'args': ['-v', '--version'],
                'kwargs': {'action': 'version',
                           'version': version.VERSION_STR}},
}

# Arguments that are 'mutually' exclusive.
CL_EXCL_GRP_ARGS_01 = {
    'silent': {'args': ['-s', '--silent'],
               'kwargs': {'action': 'store_true',
                          'dest': 'silent',
                          'help': 'no output to stdout',
                          'required': False}},
    'quiet': {'args': ['-q', '--quiet'],
              'kwargs': {'action': 'store_true',
                         'dest': 'quiet',
                         'help': 'minimal output to stdout',
                         'required': False}}
}

CL_EXCL_GRP_ARGS_02 = {
    'deployment_mode': {'args': ['--deployment'],
                        'kwargs': {'action': 'store_true',
                                   'dest': 'deployment',
                                   'help': 'install packages (must be run as root)',
                                   'required': False}},
    'download': {'args': ['-d', '--destination'],
                 'kwargs': {'type': str,
                            'nargs': 1,
                            'dest': 'download',
                            'metavar': '<destination>',
                            'help': 'download packages to the specified destination',
                            'required': False}},
    'force_download': {'args': ['-f', '--force-destination'],
                       'kwargs': {'type': str,
                                  'nargs': 1,
                                  'dest': 'force_download',
                                  'metavar': '<destination>',
                                  'help': 'force download packages to the specified destination',
                                  'required': False}},
    'force_deployment_mode': {'args': ['--force-deploy'],
                              'kwargs': {'action': 'store_true',
                                         'dest': 'force_deployment',
                                         'help': ('force install previously installed packages '
                                                  '(must be run as root)'),
                                         'required': False}},
    'build_dmg': {'args': ['-b', '--build-dmg'],
                  'kwargs': {'type': str,
                             'nargs': 1,
                             'dest': 'build_dmg',
                             'metavar': '<filename>',
                             'help': 'builds a DMG containing downloaded packages',
                             'required': False}},
    'compare': {'args': ['--compare'],
                'kwargs': {'type': str,
                           'nargs': 2,
                           'dest': 'compare',
                           'metavar': '<plist>',
                           'help': 'specify two property list files to compare packages',
                           'required': False}},
}

CL_EXCL_GRP_ARGS_03 = {
    'plist': {'args': ['-p', '--plists'],
              'kwargs': {'type': str,
                         'nargs': '+',
                         'dest': 'plists',
                         'metavar': '<plist>',
                         'help': 'specify a property list to process packages for',
                         'required': False}},
    'supported_plist': {'args': ['--supported-plists'],
                        'kwargs': {'action': 'store_true',
                                   'dest': 'show_plists',
                                   'help': 'lists what property lists are supported to process packages for',
                                   'required': False}},
}
